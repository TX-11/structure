function DoubleLinkedList(){
    function Node(element){
        this.element = element
        this.next = null
        this.prev = null
    }
    this.length = 0
    this.head = null
    this.tail = null
}
DoubleLinkedList.prototype = {
    append(element){
        let newNode = new Node(element)
        
        if(this.head == null){
            this.head = newNode
            this.tail = newNode
        }else{
            this.tail.next = newNode
            newNode.prev = this.tail
            this.tail = newNode
        }
        this.length ++
    },
    insert(position, element){
        if(position < 0 || position > this.length) return false
        
        let newNode = new Node(element)
        
        if(position === 0){
            if(this.head == null){
                this.head = newNode
                this.tail = newNode
            }else{
                this.head.prev = newNode
                newNode.next = this.head
                this.head = newNode
            }
        }else if(position === this.length){
            this.tail.next = newNode
            newNode.prev = this.tail
            this.tail = newNode
        }else{
            let current = this.head
            let previous = null
            let index = 0
            
            while(index ++ < position){
                previous = current
                current = current.next
            }
            newNode.next = current
        	newNode.prev = previous
        	current.prev = newNode
        	previous.next = newNode
        }
        this.length ++
        return true
    },
    removeAt(position){
        if(position < 0 || position >= this.length) return null
        
        let current = this.head
        if(position === 0){
            if(this.length ==1){
                this.head = null
                this.tail = null
            }else{
                this.head = this.head.next
                this.head.prev =null
            }
        }else if(position === this.length - 1){
            current = this.tail
            this.tail = this.tail.prev
            this.tail.next = null
        }else {
            let index = 0
            let previous = null
            while(index ++ < position){
                previous = current
                current = current.next
            }
            previous.next = current.next
            current.next.prev = previous
        }
        this.length --
        return current.element
    },
    indexOf(element){
      let current = this.head
      let index = 0
      while(current){
          if(current.element === element){
              return index
          }
          index ++
          current = current.next
      }
        return -1
    },
    remove(element) {
    	var index = this.indexOf(element)
    	return this.removeAt(index)
	},
    forwardString(){
        let current = this.head
        let forwardStr = ''
        while(current){
            forwardStr += ',' + current.element
            current = current.next
        }
        return forwardStr.slice(1)
    },
    reverseString(){
        let current = this.tail
        let reverseStr = ''
        while(current){
            reverseStr += ',' + current.element
            current = current.prev
        }
        return reverseStr.slice(1)
    },
    toString(){
        return this.forwardString()
    }
}
