栈是一种遵循**后进先出（LIFO）**原则的有序集合。新添加的或待删除的元素都保存在栈的同一端，称作**栈顶**，另一端就叫**栈底**。在栈里，新元素都接近栈顶，旧元素都接近栈底。

实现方法：

`1、push` 添加一个（或几个）新元素到栈顶

`2、pop` 溢出栈顶元素，同时返回被移除的元素

`3、peek` 返回栈顶元素，不对栈做修改

`4、isEmpty` 栈内无元素返回 `true`，否则返回 `false`

`5、size` 返回栈内元素个数

`6、clear` 清空栈

`7、top`用来记录当前栈顶的位置

function Stack(){
    this.itemArr = []
    this.top = 0
}
Stack.prototype={
    push(item){
        return this.itemArr[this.top++] = item;
    },
    pop(){
        return this.itemArr.splice(--this.top,1);
    },
    peek(){
        return this.itemArr[this.top - 1];
    },
    isEmpty(){
        return !this.itemArr.length
    },
    size(){
        return this.top
    },
    clear(){
        this.top = 0
        this.itemArr = []
    	return this.itemArr
    },
    
}
let stack = new Stack()




回文

function palindrome(item){
    let stack = new Stack()
    let cloitem = ''
    for(let i of item){
        stack.push(item[i])
    }
    while(stack.size() > 0){
        cloitem += stack.pop()
    }
    return cloitem == item
}




递归

function recursion(item){
    let stack = new Stack()
    let additem = 1
    while(item > 0){
        stack.push(item --)
    }
    while(stack.size() > 0){
        additem *= stack.pop()
    }
    return additem
}


进制


function system(decnum, base){
    let stack = new Stack()
    let rem = ''
    let num = '0123456789ABCDEF'
    while(decnum > 0){
        stack.push(Math.floor(decnum%base))
        decnum = Math.floor(decnum/base)
    }
    while(!stack.isEmpty()){
        rem += num[stack.pop()]
    }
    return rem
}






























